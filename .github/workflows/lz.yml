name: "OCI LZ"

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/lz.yml
      - 'core-team/infra/lz/**'

jobs:
  speculative-run:
    runs-on: ubuntu-latest
    name: TF CI/CD
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    defaults:
      run:
        working-directory: core-team/infra/lz
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Retrieve latest state file
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: find-compartment-id
        with:
          command: 'resource-manager stack get-stack-tf-state --file oci-tf.tfstate --stack-id "${{ vars.OCI_LZ_STACK_ID }}"'
          silent: false

      - name: Create PR git connection
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: create-gh-pr-git-config
        with:
          command: 'resource-manager configuration-source-provider create-github-access-token-provider --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" --access-token "${{ secrets.GITHUB_TOKEN }}" --api-endpoint "https://github.com" --display-name "gh-lz-pr-${{ github.event.number }}-action-${{ github.run_id }}"'
          query: "data.id"
          silent: false

      - name: Create PR Stack
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: create-gh-pr-stack
        with:
          command: 'resource-manager stack create-from-git-provider --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" --config-source-configuration-source-provider-id ${{ fromJson(steps.create-gh-pr-git-config.outputs.output) }} --config-source-branch-name "refs/pull/${{ github.event.number }}/head" --config-source-repository-url "https://github.com/${{ github.repository }}" --config-source-working-directory lz --display-name "stack-gh-pr-${{ github.event.number }}-action-${{ github.run_id }}" --terraform-version "1.2.x" --variables "{\"tenancy_ocid\":\"${{ secrets.OCI_CLI_TENANCY }}\" , \"region\":\"${{ secrets.OCI_CLI_REGION }}\"}"'
          query: "data.id"
          silent: false

      - name: Import current stack
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: import-gh-pr-stack
        with:
          command: " oci resource-manager job create-import-tf-state-job --stack-id ${{ fromJson(steps.create-gh-pr-stack.outputs.output) }} --tf-state-file oci-tf.tfstate --wait-for-state SUCCEEDED --wait-for-state FAILED --wait-for-state CANCELED --max-wait-seconds 600 --wait-interval-seconds 10"
          query: "data.id"
          silent: false

      - name: Run speculative plan
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: run-tf-plan
        with:
          command: 'resource-manager job create-plan-job --stack-id ${{ fromJson(steps.create-gh-pr-stack.outputs.output) }} --display-name "plan-gh-pr-${{ github.event.number }}-action-${{ github.run_id }}" --wait-for-state SUCCEEDED --wait-for-state FAILED --wait-for-state CANCELED --max-wait-seconds 600 --wait-interval-seconds 10'
          query: "data.id"
          silent: false

      - name: Get speculative plan
        uses: oracle-actions/run-oci-cli-command@v1.1.1
        id: fetch-plan
        with:
          command: "resource-manager job get-job-tf-state --file ${{ runner.temp }}/pr-plan.tfplan --job-id ${{ fromJson(steps.run-tf-plan.outputs.output) }}"
          silent: false

      - name: Terraform Validate
        id: parse-tfplan
        run: terraform show -no-color ${{ runner.temp }}/pr-plan.tfplan

      - uses: actions/github-script@v6
        if: success() && github.event_name == 'pull_request'
        env:
          PLAN: "OCI speculative terraform plan \n https://cloud.oracle.com/resourcemanager/jobs/${{ fromJson(steps.run-tf-plan.outputs.output) }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.run-tf-plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: \`${{ github.actor }}\`, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
